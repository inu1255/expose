// Code generated by protoc-gen-go. DO NOT EDIT.
// source: computer.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	computer.proto

It has these top-level messages:
	ComputerRegisterBody
	Computer
	String
	SrcDst
	Int
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "gopkg.in/mgo.v2/bson"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ComputerRegisterBody struct {
	Mac  string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ComputerRegisterBody) Reset()                    { *m = ComputerRegisterBody{} }
func (m *ComputerRegisterBody) String() string            { return proto.CompactTextString(m) }
func (*ComputerRegisterBody) ProtoMessage()               {}
func (*ComputerRegisterBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ComputerRegisterBody) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *ComputerRegisterBody) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Computer struct {
	Id   bson.ObjectId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id"`
	Mac  string        `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Name string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Computer) Reset()                    { *m = Computer{} }
func (m *Computer) String() string            { return proto.CompactTextString(m) }
func (*Computer) ProtoMessage()               {}
func (*Computer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Computer) GetId() string {
	if m != nil {
		return m.Id.Hex()
	}
	return ""
}

func (m *Computer) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *Computer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type String struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *String) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type SrcDst struct {
	Src string `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst string `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
}

func (m *SrcDst) Reset()                    { *m = SrcDst{} }
func (m *SrcDst) String() string            { return proto.CompactTextString(m) }
func (*SrcDst) ProtoMessage()               {}
func (*SrcDst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SrcDst) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *SrcDst) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

type Int struct {
	I int32 `protobuf:"varint,1,opt,name=i" json:"i,omitempty"`
}

func (m *Int) Reset()                    { *m = Int{} }
func (m *Int) String() string            { return proto.CompactTextString(m) }
func (*Int) ProtoMessage()               {}
func (*Int) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Int) GetI() int32 {
	if m != nil {
		return m.I
	}
	return 0
}

func init() {
	proto.RegisterType((*ComputerRegisterBody)(nil), "msg.ComputerRegisterBody")
	proto.RegisterType((*Computer)(nil), "msg.Computer")
	proto.RegisterType((*String)(nil), "msg.String")
	proto.RegisterType((*SrcDst)(nil), "msg.SrcDst")
	proto.RegisterType((*Int)(nil), "msg.Int")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ComputerService service

type ComputerServiceClient interface {
	Register(ctx context.Context, in *ComputerRegisterBody, opts ...grpc.CallOption) (*Computer, error)
	Exist(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int, error)
	AskAddr(ctx context.Context, in *SrcDst, opts ...grpc.CallOption) (*String, error)
}

type computerServiceClient struct {
	cc *grpc.ClientConn
}

func NewComputerServiceClient(cc *grpc.ClientConn) ComputerServiceClient {
	return &computerServiceClient{cc}
}

func (c *computerServiceClient) Register(ctx context.Context, in *ComputerRegisterBody, opts ...grpc.CallOption) (*Computer, error) {
	out := new(Computer)
	err := grpc.Invoke(ctx, "/msg.ComputerService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computerServiceClient) Exist(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := grpc.Invoke(ctx, "/msg.ComputerService/Exist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computerServiceClient) AskAddr(ctx context.Context, in *SrcDst, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/msg.ComputerService/AskAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ComputerService service

type ComputerServiceServer interface {
	Register(context.Context, *ComputerRegisterBody) (*Computer, error)
	Exist(context.Context, *String) (*Int, error)
	AskAddr(context.Context, *SrcDst) (*String, error)
}

func RegisterComputerServiceServer(s *grpc.Server, srv ComputerServiceServer) {
	s.RegisterService(&_ComputerService_serviceDesc, srv)
}

func _ComputerService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputerRegisterBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputerServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ComputerService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputerServiceServer).Register(ctx, req.(*ComputerRegisterBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputerService_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputerServiceServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ComputerService/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputerServiceServer).Exist(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputerService_AskAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrcDst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputerServiceServer).AskAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ComputerService/AskAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputerServiceServer).AskAddr(ctx, req.(*SrcDst))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.ComputerService",
	HandlerType: (*ComputerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ComputerService_Register_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _ComputerService_Exist_Handler,
		},
		{
			MethodName: "AskAddr",
			Handler:    _ComputerService_AskAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "computer.proto",
}

func init() { proto.RegisterFile("computer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x9b, 0xd6, 0xad, 0x75, 0xd4, 0x55, 0x46, 0x91, 0xb5, 0xa7, 0x25, 0x20, 0x78, 0x90,
	0x1e, 0x14, 0x3c, 0x79, 0x70, 0xfd, 0x73, 0xd8, 0x6b, 0xfb, 0x09, 0xd6, 0x24, 0x94, 0x20, 0x69,
	0x97, 0xcc, 0x28, 0xfa, 0x35, 0xfc, 0xc4, 0xd2, 0xd8, 0xc8, 0x8a, 0x7b, 0x9b, 0xbc, 0x99, 0xf7,
	0xe3, 0xbd, 0xc0, 0x54, 0xf5, 0x6e, 0xfd, 0xc6, 0xc6, 0x57, 0x6b, 0xdf, 0x73, 0x8f, 0x99, 0xa3,
	0x56, 0xde, 0xc1, 0xe9, 0xe3, 0x28, 0xd7, 0xa6, 0xb5, 0xc4, 0xc6, 0x3f, 0xf4, 0xfa, 0x13, 0x8f,
	0x21, 0x73, 0x2b, 0x35, 0x13, 0x73, 0x71, 0xb9, 0x57, 0x0f, 0x23, 0x22, 0xec, 0x74, 0x2b, 0x67,
	0x66, 0x69, 0x90, 0xc2, 0x2c, 0xef, 0xa1, 0x88, 0x6e, 0x9c, 0x42, 0x6a, 0xf5, 0x68, 0x48, 0xad,
	0x8e, 0x84, 0xf4, 0x3f, 0x21, 0xdb, 0x20, 0x9c, 0x41, 0xde, 0xb0, 0xb7, 0x5d, 0x8b, 0x07, 0x20,
	0x68, 0xb4, 0x0b, 0x92, 0x57, 0x90, 0x37, 0x5e, 0x3d, 0x11, 0x0f, 0x1c, 0xf2, 0xbf, 0x49, 0xc8,
	0xab, 0x41, 0xd1, 0xc4, 0x91, 0xac, 0x89, 0xe5, 0x09, 0x64, 0xcb, 0x8e, 0x07, 0x84, 0x0d, 0x87,
	0x93, 0x5a, 0xd8, 0xeb, 0x2f, 0x01, 0x47, 0x31, 0x5d, 0x63, 0xfc, 0xbb, 0x55, 0x06, 0x6f, 0xa1,
	0x88, 0x35, 0xf1, 0xbc, 0x72, 0xd4, 0x56, 0xdb, 0xda, 0x97, 0x87, 0x7f, 0x56, 0x32, 0xc1, 0x39,
	0x4c, 0x9e, 0x3f, 0x2c, 0x31, 0xee, 0x87, 0xcd, 0x4f, 0xe4, 0xb2, 0x08, 0x8f, 0x65, 0xc7, 0x32,
	0xc1, 0x0b, 0xd8, 0x5d, 0xd0, 0xeb, 0x42, 0x6b, 0x1f, 0x6f, 0x42, 0xfc, 0x72, 0xd3, 0x20, 0x93,
	0x97, 0x3c, 0xfc, 0xfd, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x4f, 0xb8, 0x01, 0x8d,
	0x01, 0x00, 0x00,
}
